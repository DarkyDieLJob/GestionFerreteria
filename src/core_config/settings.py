"""
Django settings for core_config project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import importlib
import os
from decouple import AutoConfig, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Use python-decouple with explicit search path to ensure src/.env is loaded
# regardless of the working directory (e.g., inside Docker or local dev)
config = AutoConfig(search_path=BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Cargada desde variables de entorno (src/.env). Proveer un default de desarrollo.
SECRET_KEY = config('SECRET_KEY', default='changeme_insecure_secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=True)

# Lista separada por comas: 127.0.0.1,localhost,mi-dominio.com
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default='127.0.0.1,localhost')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Requerido por django-allauth
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Ejemplo: proveedor Google
    'allauth.socialaccount.providers.github',  # Ejemplo: proveedor GitHub
    'core_app.apps.Core_appConfig',
    'core_auth.apps.Core_authConfig',
]

# Configuración de django-allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 2  # Requerido por django-allauth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'github': {
        'APP': {
            'client_id': config('GITHUB_CLIENT_ID', default=''),
            'secret': config('GITHUB_SECRET', default=''),
            'key': '',
        },
        'SCOPE': ['user:email'],
    }
}

# Configuración de REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'core_auth.adapters.middleware.ForcePasswordChangeMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core_config.urls'

# Configuración de plantillas
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Project-level templates
            os.path.join(BASE_DIR, 'core_app', 'templates'),  # Core app templates
            os.path.join(BASE_DIR, 'core_auth', 'templates'),  # Auth app templates
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core_app.context_processors.coverage',
                'core_auth.context_processors.staff_reset_requests_badge',
                'core_app.context_processors.app_meta',
            ],
        },
    },
]

WSGI_APPLICATION = 'core_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'data/db_default.sqlite3',
    }
}

# Importar configuraciones de bases de datos de aplicaciones
for app in INSTALLED_APPS:
    if app.startswith('core_') or app == 'cart':
        try:
            module = importlib.import_module(f'{app.split(".")[0]}.config')
            DATABASES.update(getattr(module, 'DATABASE', {}))
        except (ImportError, AttributeError):
            pass  # La aplicación no define una base de datos propia

DATABASE_ROUTERS = ['core_config.database_routers.DynamicDatabaseRouter']

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# URL base para archivos estáticos
STATIC_URL = 'static/'

# Directorios donde Django buscará archivos estáticos adicionales
STATICFILES_DIRS = [
    os.path.join(BASE_DIR.parent, 'static'),  # Apunta a /DjangoProyects/static/
]

# Directorio donde se recopilarán los archivos estáticos para producción
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Se creará en /src/staticfiles/

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_REDIRECT_URL = 'home'  # Redirect to home after login
LOGOUT_REDIRECT_URL = 'home'  # Redirect to home after logout
LOGIN_URL = 'core_auth:login'  # URL to redirect to for login (using namespaced URL)

# Allauth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Change to 'mandatory' for email verification
ACCOUNT_LOGOUT_ON_GET = True  # Skip the logout confirmation page
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Allow login with username or email
ACCOUNT_EMAIL_REQUIRED = True  # Require email for signup
ACCOUNT_UNIQUE_EMAIL = True  # Enforce unique email addresses

# Variables de personalización de la aplicación y recuperación
# Nombre de la aplicación y número de contacto oficial (WhatsApp)
NOMBRE_APLICACION = config('NOMBRE_APLICACION', default='Mi Aplicacion')
WHATSAPP_CONTACT = config('WHATSAPP_CONTACT', default='+00 000 000 000')

# Parámetros del flujo de recuperación sin email
PASSWORD_RESET_TICKET_TTL_HOURS = int(config('PASSWORD_RESET_TICKET_TTL_HOURS', default=48))
TEMP_PASSWORD_LENGTH = int(config('TEMP_PASSWORD_LENGTH', default=16))
