name: CI

on:
  push:
    branches:
      - main
      - develop
      - pre-release
      - 'feature/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
      - pre-release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black + flake8)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            requirements/dev.txt

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Version tools
        run: |
          black --version
          flake8 --version

      - name: Run black (check)
        run: black --check src/core_app src/core_auth scripts

      - name: Run flake8
        run: flake8 src/core_app src/core_auth scripts

  test:
    name: Tests (pytest + coverage)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            requirements/notebook.txt

      - name: Install runtime dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/notebook.txt

      - name: Debug environment (Python, pip, DB settings)
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: core_config.test_settings
        run: |
          python --version
          pip --version
          python -c "import pprint, django, os; os.environ.setdefault('DJANGO_SETTINGS_MODULE','core_config.test_settings'); django.setup(); from django.conf import settings; pprint.pprint({'BASE_DIR': str(settings.BASE_DIR), 'DATABASES': settings.DATABASES})"

      - name: Reset test DB file
        working-directory: src
        run: |
          mkdir -p data
          rm -f data/test_default.sqlite3

      - name: Prepare DB (sync tables)
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: core_config.test_settings
          USE_MIGRATIONS: "1"
        run: |
          python manage.py migrate --noinput

      - name: Verify tables after migrate
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: core_config.test_settings
        run: |
          python - <<'PY'
          import os, django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE','core_config.test_settings')
          django.setup()
          from django.db import connection
          tables = sorted(connection.introspection.table_names())
          print("Tables ({}):".format(len(tables)))
          print(tables)
          for t in [
              'precios_descuento', 'precios_preciodelista', 'articulos_articulo', 'importaciones_configimportacion'
          ]:
              print(f"has {t}?", t in tables)
          PY

      - name: Run tests
        working-directory: src
        env:
          DJANGO_SETTINGS_MODULE: core_config.test_settings
          USE_MIGRATIONS: "1"
          PYTEST_ADDOPTS: ""
        run: pytest -q --reuse-db

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: src/htmlcov

  # Example staging deploy (disabled placeholder)
  deploy-staging:
    name: Deploy to Staging (pre-release)
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/pre-release'
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder deploy step
        run: |
          echo "Deploy to staging would happen here. Configure your deploy steps and secrets."

  # Example production deploy (disabled placeholder)
  deploy-production:
    name: Deploy to Production (tag)
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
